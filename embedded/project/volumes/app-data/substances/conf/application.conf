include "substances-core.conf"
include "substances-env.conf"
include "substances-env-db.conf"

##################################################################
# MAIN CONFIGURATION                                            ##
##################################################################
CONFIG_TEST_APPL_CONF="This is substances application.conf"


spring.application.name="substances"

# ??? this doesn't work well with embedded tomcat
server.servlet.context-path="/"${spring.application.name}
server.servlet.context-path=${?MS_SERVLET_CONTEXT_PATH_SUBSTANCES}

ix.home=${spring.application.name}".ix"
ix.home=${?IX_HOME}

application.host="http://localhost:8080"
application.host=${?APPLICATION_HOST}

# Server port is used in embedded Tomcat
server.port=""
server.port=${?MS_SERVER_PORT_SUBSTANCES}

# Secure session off for dev, but if using HTTPS it's better to have it on
gsrs.sessions.sessionSecure=false

gsrs.substances.molwitch.enabled=true

# PUT YOUR PERSONAL EXTENSIONS AND ADDITIONS HERE
#debug=true
spring.main.allow-bean-definition-overriding=true

# export path
ix.ginas.export.path=./exports
ix.ginas.export.path=${?MS_EXPORT_PATH_SUBSTANCES}

gsrs.substance.structures.saltFilePath=${?MS_SALT_PATH_SUBSTANCES}

# maximum file upload size
spring.servlet.multipart.max-file-size=512MB
spring.servlet.multipart.max-request-size=512MB

# For jchem3
# ix.structure-hasher = "ix.core.chem.LychiStructureHasher"
# ix.structure-standardizer = "ix.core.chem.LychiStandardizer"

# For CDK
ffix.structure-hasher = "ix.core.chem.InchiStructureHasher"
ix.structure-standardizer = "ix.core.chem.InchiStandardizer"

##################################################################
# SPRING BOOT ACTUATOR SETTINGS FOR MICROSERVICE HEALTH CHECKS  ##
##################################################################
# turn off rabbit mq check for now since we don't use it otherwise it will say we are down
management.health.rabbit.enabled: false

management.endpoints.web.base-path="/service-info/api/v1/"${spring.application.name}"/actuator"
management.endpoints.web.exposure.include=${?MS_ACTUATOR_EXPOSE_ENDPOINTS_SUBSTANCES}

##################################################################
# GSRS CONFIGURATION REPORTS                                    ##
##################################################################

# See document 'How configuration works' for discussion of security implications.
# If in doubt, you probably want false (default) for all optons in production or even online development instances
gsrs.extensions.config.report.api.enabled=${?EXTENSIONS_CONFIG_REPORT_API_ENABLED}
gsrs.services.config.properties.report.api.enabled=${?CONFIG_PROPERTIES_REPORT_API_ENABLED}
gsrs.services.config.properties.report.log.enabled=${?CONFIG_PROPERTIES_REPORT_LOG_ENABLED}

##################################################################
# EUREKA SETTINGS                                               ##
##################################################################

eureka.instance.hostname=${spring.application.name}
eureka.client.serviceUrl.defaultZone="http://localhost:8761/eureka"
eureka.client.serviceUrl.defaultZone=${?EUREKA_SERVICE_URL}
#turn off eureka for now
eureka.client.enabled=false
eureka.client.enabled=${?EUREKA_CLIENT_ENABLED}

##################################################################
# DATABASE CONNECTION                                           ##
##################################################################

ix.h2 {
	base = ./${ix.home}/h2
}

spring.datasource.url="jdbc:h2:"${ix.h2.base}"/sprinxight;AUTO_SERVER=TRUE"
spring.datasource.url=${?DB_URL_SUBSTANCES}
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.driverClassName=${?DB_DRIVER_CLASS_NAME}
spring.datasource.driverClassName=${?DB_DRIVER_CLASS_NAME_SUBSTANCES}
spring.datasource.username=${?DB_USERNAME}
spring.datasource.username=${?DB_USERNAME_SUBSTANCES}
spring.datasource.password=${?DB_PASSWORD}
spring.datasource.password=${?DB_PASSWORD_SUBSTANCES}
spring.datasource.connectionTimeout=120000
spring.datasource.connectionTimeout=${?DB_CONNECTION_TIMEOUT}
spring.datasource.connectionTimeout=${?DB_CONNECTION_TIMEOUT_SUBSTANCES}
spring.datasource.maximumPoolSize=50
spring.datasource.maximumPoolSize=${?DB_MAXIMUM_POOL_SIZE}
spring.datasource.maximumPoolSize=${?DB_MAXIMUM_POOL_SIZE_SUBSTANCES}
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.database-platform=${?DB_DIALECT}
spring.jpa.database-platform=${?DB_DIALECT_SUBSTANCES}
spring.jpa.hibernate.ddl-auto=none
spring.jpa.hibernate.ddl-auto=${?DB_DDL_AUTO}
spring.jpa.hibernate.ddl-auto=${?DB_DDL_AUTO_SUBSTANCES}
spring.jpa.hibernate.use-new-id-generator-mappings=${?DB_USE_NEW_ID_GENERATOR_MAPPINGS}
spring.hibernate.show-sql=false

##################################################################
# API SETTINGS                                                  ##
##################################################################

substanceAPI.BaseUrl="http://localhost:8080/"
substanceAPI.BaseUrl=${?API_URL}
gsrs.microservice.applications.api.baseURL=${substanceAPI.BaseUrl}"applications"
gsrs.microservice.applications.api.baseURL=${?API_BASE_URL_APPLICATIONS}
gsrs.microservice.clinicaltrialsus.api.baseURL=${substanceAPI.BaseUrl}"clinical-trials"
gsrs.microservice.clinicaltrialsus.api.baseURL=${?API_BASE_URL_CLINICAL_TRIALS}
gsrs.microservice.clinicaltrialsus.api.baseURL=${?API_BASE_URL__CLINICAL_TRIALS_US}
gsrs.microservice.clinicaltrialseurope.api.baseURL=${substanceAPI.BaseUrl}"clinical-trials"
gsrs.microservice.clinicaltrialseurope.api.baseURL=${?API_BASE_URL_CLINICAL_TRIALS}
gsrs.microservice.clinicaltrialseurope.api.baseURL=${?API_BASE_URL_CLINICAL_TRIALS_EUROPE}
gsrs.microservice.products.api.baseURL=${substanceAPI.BaseUrl}"products"
gsrs.microservice.products.api.baseURL=${?API_BASE_URL_PRODUCTS}

gsrs.loopback.port=8080
gsrs.loopback.port=${?APPLICATION_HOST_PORT}
gsrs.loopback.port=${?MS_LOOPBACK_PORT_SUBSTANCES}

gsrs.application.ivm.search.max.fetch = "20000"
gsrs.product.ivm.search.max.fetch = "20000"
gsrs.clinicaltrial.ivm.search.max.fetch = "20000"

gsrs.substance.structures.saltFilePath=salt_data_public.tsv

##################################################################
# CONFIGURATIONS VALIDATORS, PROCESSORS, EXPORT, etc            ##
##################################################################

ix.ginas.approvalIdGenerator.generatorClass="ix.ginas.utils.UNIIGenerator"
ix.ginas.approvalIdGenerator.generatorClass=${?APPROVALID_GENERATOR}
ix.ginas.approvalIdGenerator.parameters.name=${?APPROVALID_NAME}
ix.ginas.approvalIdGenerator.parameters.codeSystem=${?APPROVALID_CODESYSTEM}

# __aw__ can we remove from MS since already in -core.conf?
ix.ginas.export.settingsPresets.substances= {
	"PUBLIC_DATA_ONLY": {
		"owner":"admin",
		"scrubberSettings": {
			"removeAllLocked":true
		}
	},
	"ALL_DATA": {
		"owner":"admin",
		"scrubberSettings":null
	}
}



gsrs.importAdapterFactories.substances =
	[
		{
		
			"adapterName": "SDF Adapter",
			"importAdapterFactoryClass": "gsrs.module.substance.importers.SDFImportAdapterFactory",
			"stagingAreaServiceClass": "gsrs.stagingarea.service.DefaultStagingAreaService",
			"entityServiceClass" :"gsrs.dataexchange.SubstanceStagingAreaEntityService",
			"description" : "SD file importer for general users",
			"supportedFileExtensions": [
				"sdf",
				"sd",
				"sdfile"
			],
			
			"parameters": {
			#the things used to instantiate a thing used to do the import
			
				"fileImportActions": [
				##list of available actions for user to select from
				#each action takes in a file record + a substance record to update substance record with data from file
				{
						"actionClass": "gsrs.module.substance.importers.importActionFactories.NameExtractorActionFactory",
						"fields": [
							{
								"fieldName": "Name",
								"fieldLabel": "Substance Name",
								"defaultValue": null,
								"fieldType": "java.lang.String",
								"expectedToChange": true,
								"required": true,
								"lookupKey": null
							},
							{
								"fieldName": "nameType",
								"fieldLabel": "Name Type",
								"defaultValue": "cn",
								"cv": "name_type",
								"fieldType": "java.lang.String",
								"expectedToChange": true,
								"required": false,
								"lookupKey": null
							},
							{
								"fieldName": "displayName",
								"fieldLabel": "Display Name?",
								"defaultValue": false,
								"fieldType": "java.lang.Boolean",
								"expectedToChange": true,
								"required": false,
								"lookupKey": null
							}
						],
						"parameters": {
							"lang": "en"
						},
						"actionName": "common_name",
						"label":"Create Name"
					},
					{
						"actionName": "code_import",
						"label":"Create Code",
						"actionClass": "gsrs.module.substance.importers.importActionFactories.CodeExtractorActionFactory",
						"fields": [
							{
								"fieldName": "code",
								"fieldLabel": "Code/Identifier",
								"defaultValue": null,
								"fieldType": "java.lang.String",
								"expectedToChange": true,
								"required": true,
								"lookupKey": null
							},
							{
								"fieldName": "codeType",
								"fieldLabel": "Primary or Alternative",
								"defaultValue": "PRIMARY",
								"fieldType": "java.lang.String",
								"expectedToChange": true,
								"required": false,
								"lookupKey": null
							},
							{
								"fieldName": "codeSystem",
								"fieldLabel": "Code System",
								"defaultValue": null,
								"fieldType": "java.lang.String",
								"expectedToChange": true,
								"required": true,
								"lookupKey": null
							}
						],
						"parameters": {
						}
					},
					{
						"actionClass": "gsrs.module.substance.importers.importActionFactories.NSRSCustomCodeExtractorActionFactory",
						"fields": [
							{
								"fieldName": "code",
								"fieldLabel": "NSC Number",
								"defaultValue": null,
								"fieldType": "java.lang.String",
								"expectedToChange": true,
								"required": true,
								"lookupKey": null
							},
							{
								"fieldName": "codeType",
								"fieldLabel": "Primary or Alternative",
								"defaultValue": "PRIMARY",
								"fieldType": "java.lang.String",
								"expectedToChange": true,
								"required": false,
								"lookupKey": null
							}
						],
						"parameters": {
							"codeSystem": "NSC"
						},
						"actionName": "nci_import",
						"label":"Create NSC Code"
					},
					{
						"actionClass": "gsrs.module.substance.importers.importActionFactories.StructureExtractorActionFactory",
						"fields": [
							{
								"fieldName": "molfile",
								"fieldLabel": "Structure",
								"defaultValue": null,
								"fieldType": "java.lang.String",
								"expectedToChange": true,
								"required": true,
								"lookupKey": null
							}
						],
						"parameters": {

						},
						"actionName": "structure_and_moieties",
						"label":"Create Structure"
					},
					{
						"actionClass": "gsrs.module.substance.importers.importActionFactories.PropertyExtractorActionFactory",
						"fields": [
							{
								"fieldName": "name",
								"fieldLabel": "Name",
								"defaultValue": null,
								"fieldType": "java.lang.String",
								"expectedToChange": true,
								"required": true,
								"lookupKey": null
							},
							{
								"fieldName": "propertyType",
								"fieldLabel": "Property Type",
								"defaultValue": "chemical",
								"fieldType": "java.lang.String",
								"expectedToChange": true,
								"required": false,
								"lookupKey": null
							},
							{
								"fieldName": "valueAverage",
								"fieldLabel": "Average Value",
								"defaultValue": null,
								"fieldType": "java.lang.Double",
								"expectedToChange": true,
								"required": false,
								"lookupKey": null
							},
							{
								"fieldName": "valueNonNumeric",
								"fieldLabel": "Non-numeric Value",
								"defaultValue": null,
								"fieldType": "java.lang.String",
								"expectedToChange": true,
								"required": false,
								"lookupKey": null
							},
							{
								"fieldName": "valueUnits",
								"fieldLabel": "Units",
								"defaultValue": null,
								"fieldType": "java.lang.String",
								"expectedToChange": true,
								"required": false,
								"lookupKey": null
							}
						],
						"parameters": {
						},
						"actionName": "property_import",
						"label":"Create Chemical Property"
					},
					{
						"actionClass": "gsrs.module.substance.importers.importActionFactories.ReferenceExtractorActionFactory",
						"fields": [
							{
								"fieldName": "docType",
								"fieldLabel": "Type",
								"defaultValue": "OTHER",
								"fieldType": "java.lang.String",
								"expectedToChange": true,
								"required": true,
								"lookupKey": null
							},
							{
								"fieldName": "citation",
								"fieldLabel": "Reference",
								"defaultValue": "{INSERT REFERENCE CITATION HERE}",
								"fieldType": "java.lang.String",
								"expectedToChange": true,
								"required": false,
								"lookupKey": null
							}
						],
						"parameters": {
							
						},
						"actionName": "public_reference",
						"label":"Create Reference"
					},
					{
						"actionClass": "gsrs.module.substance.importers.importActionFactories.NotesExtractorActionFactory",
						"fields": [
							{
								"fieldName": "note",
								"fieldLabel": "Note",
								"defaultValue": null,
								"fieldType": "java.lang.String",
								"expectedToChange": true,
								"required": true,
								"lookupKey": null
							}
						],
						"parameters": {
						},
						"actionName": "note_import",
						"label":"Create Note"
					},
					{
						"actionClass": "gsrs.module.substance.importers.importActionFactories.NoOpActionFactory",
						"fields": [
						{
								"fieldName": "fieldName",
								"fieldLabel": "Field to ignore",
								"fieldType": "java.lang.String",
								"expectedToChange": true,
								"lookupKey": null
							}
						],
						"parameters": {
						},
						"actionName": "no-op",
						"label":"Omit this field"
					}
				]
			}
		},
		{
			"adapterName": "GSRS JSON Adapter",
			"importAdapterFactoryClass": "gsrs.module.substance.importers.GSRSJSONImportAdapterFactory",
			"stagingAreaServiceClass": "gsrs.stagingarea.service.DefaultStagingAreaService",
			"entityServiceClass" :"gsrs.dataexchange.SubstanceStagingAreaEntityService",
			"description" : "GSRS legacy JSON file importer",
			#extensions belong here because they can override the default set within the class
			"supportedFileExtensions": [
				"gsrs",
				"gz"
			],
			"parameters": {
			}
		}
	]

##################################################################
# LEGACY AUTHENTICATION                                         ##
##################################################################

ix.authentication.allownonauthenticated = ${?AUTH_ALLOW_NONAUTH}
ix.authentication.autoregister = ${?AUTH_AUTOREGISTER}
ix.authentication.autoregisteractive = ${?AUTH_AUTOREGISTERACTIVE}
ix.authentication.sysadmin-email = ${?AUTH_SYSADMIN_EMAIL}
ix.authentication.trustheader = ${?AUTH_TRUST_HEADER}
ix.authentication.usernameheader = ${?AUTH_USERNAME_HEADER}
ix.authentication.useremailheader = ${?AUTH_EMAIL_HEADER}
ix.authentication.userrolesheader = ${?AUTH_ROLES_HEADER}

##################################################################
# CUSTOM CONFIGURATION                                          ##
##################################################################

include "conf/substances.conf"
include "substances.conf"
